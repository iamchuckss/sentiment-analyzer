{"version":3,"sources":["components/Polarity.js","App.js","registerServiceWorker.js","index.js"],"names":["Polarity","green","Math","round","this","props","polarity","textColor","backgroundColor","padding","style","sentence","Component","marginLeft","App","onEnterPress","e","key","analyzeSentence","state","undefined","fetch","method","headers","body","JSON","stringify","textField","getValue","then","response","json","data","setState","polarityComponent","className","zDepth","ref","onKeyUp","bind","hintText","label","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sRAsBeA,E,iLAXP,IAAMC,EAAQC,KAAKC,MAAkC,KAA3BC,KAAKC,MAAMC,SAAW,IAE1CC,EAAY,CACdC,gBAAiB,QAFT,IAAMP,GAEkB,KAAOA,EAAQ,OAC/CQ,QAAS,QAGb,OAAO,yBAAKC,MAAOH,GAAZ,IAAyBH,KAAKC,MAAMM,SAApC,qBAAgEP,KAAKC,MAAMC,SAA3E,S,GAfQM,aCKjBF,EAAQ,CACVG,WAAY,IAmDDC,E,YA/CX,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KAmBVU,aAAe,SAAAC,GACG,UAAVA,EAAEC,KACF,EAAKC,mBApBT,EAAKC,MAAQ,CACTR,SAAU,GACVL,cAAUc,GAJC,E,+EAQA,IAAD,OACdC,MAAM,kCAAmC,CACrCC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAACf,SAAUP,KAAKuB,UAAUC,eAE9CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAASD,Q,+BAS1B,IAAD,OACCE,OAA4Cd,IAAxBhB,KAAKe,MAAMb,SACjC,kBAAC,EAAD,CAAUK,SAAUP,KAAKe,MAAMR,SAAUL,SAAUF,KAAKe,MAAMb,WAC9D,KAEJ,OACI,kBAAC,IAAD,KACI,yBAAK6B,UAAU,aACX,kBAAC,IAAD,CAAOC,OAAQ,EAAGD,UAAU,WACxB,kDACA,kBAAC,IAAD,CAAWE,IAAK,SAAAA,GAAG,OAAI,EAAKV,UAAYU,GAAKC,QAASlC,KAAKW,aAAawB,KAAKnC,MAClEoC,SAAS,wBACpB,kBAAC,IAAD,CAAeC,MAAM,OAAO/B,MAAOA,EAAOgC,QAAStC,KAAKc,gBAAgBqB,KAAKnC,QAC5E8B,S,GAxCPtB,aCFZ+B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTrB,MAAK,SAAAyB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrC,QACfgC,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCjEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDelC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,GAAN,sBAEP1B,EAwCV,SAAiCO,GAE/B7B,MAAM6B,GACHrB,MAAK,SAAAC,GAGkB,MAApBA,EAAS0C,SACuD,IAAhE1C,EAASP,QAAQkD,IAAI,gBAAgBC,QAAQ,cAG7CvB,UAAUC,cAAcuB,MAAM9C,MAAK,SAAAyB,GACjCA,EAAasB,aAAa/C,MAAK,WAC7BgB,OAAOC,SAAS+B,eAKpB5B,EAAgBC,MAGnBY,OAAM,WACLF,QAAQC,IACN,oEA5DAiB,CAAwB5B,GAGxBD,EAAgBC,OCjCxB6B,I","file":"static/js/main.4b3d1e86.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Polarity extends Component {\n\n    propTypes = {\n        sentence: PropTypes.string.isRequired,\n        polarity: PropTypes.number.isRequired\n    };\n\n    render() {\n        const green = Math.round((this.props.polarity + 1) * 128);\n        const red = 255 - green;\n        const textColor = {\n            backgroundColor: 'rgb(' + red + ', ' + green + ', 0)',\n            padding: '15px'\n        };\n\n        return <div style={textColor}>\"{this.props.sentence}\" has polarity of {this.props.polarity} </div>\n    }\n}\n\nexport default Polarity;","import React, {Component} from 'react';\nimport './App.css';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport TextField from 'material-ui/TextField';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Paper from 'material-ui/Paper';\nimport Polarity from \"./components/Polarity\";\n\nconst style = {\n    marginLeft: 12,\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sentence: '',\n            polarity: undefined\n        };\n    };\n\n    analyzeSentence() {\n        fetch('http://localhost:8080/sentiment', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({sentence: this.textField.getValue()})\n        })\n            .then(response => response.json())\n            .then(data => this.setState(data));\n    }\n\n    onEnterPress = e => {\n        if (e.key === 'Enter') {\n            this.analyzeSentence();\n        }\n    };\n\n    render() {\n        const polarityComponent = this.state.polarity !== undefined ?\n            <Polarity sentence={this.state.sentence} polarity={this.state.polarity}/> :\n            null;\n\n        return (\n            <MuiThemeProvider>\n                <div className=\"centerize\">\n                    <Paper zDepth={1} className=\"content\">\n                        <h2>Sentiment Analyser</h2>\n                        <TextField ref={ref => this.textField = ref} onKeyUp={this.onEnterPress.bind(this)}\n                                   hintText=\"Type your sentence.\"/>\n                        <RaisedButton  label=\"Send\" style={style} onClick={this.analyzeSentence.bind(this)}/>\n                        {polarityComponent}\n                    </Paper>\n                </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}